// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/base/metrics/RecordHistogram

#ifndef org_chromium_base_metrics_RecordHistogram_JNI
#define org_chromium_base_metrics_RecordHistogram_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

// Step 1: forward declarations.
JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_base_metrics_RecordHistogram[];
const char kClassPath_org_chromium_base_metrics_RecordHistogram[] =
    "org/chromium/base/metrics/RecordHistogram";

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_chromium_base_metrics_RecordHistogram_clazz = 0;
#ifndef org_chromium_base_metrics_RecordHistogram_clazz_defined
#define org_chromium_base_metrics_RecordHistogram_clazz_defined
inline jclass org_chromium_base_metrics_RecordHistogram_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_base_metrics_RecordHistogram,
      &g_org_chromium_base_metrics_RecordHistogram_clazz);
}
#endif

namespace base {
namespace android {

// Step 2: method stubs.

static jlong RecordCustomTimesHistogramMilliseconds(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& name,
    jlong key,
    jint duration,
    jint min,
    jint max,
    jint numBuckets);

JNI_GENERATOR_EXPORT jlong
    Java_org_chromium_base_metrics_RecordHistogram_nativeRecordCustomTimesHistogramMilliseconds(JNIEnv*
    env, jclass jcaller,
    jstring name,
    jlong key,
    jint duration,
    jint min,
    jint max,
    jint numBuckets) {
  return RecordCustomTimesHistogramMilliseconds(env,
      base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, name), key, duration, min, max,
      numBuckets);
}

static jlong RecordBooleanHistogram(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& name,
    jlong key,
    jboolean sample);

JNI_GENERATOR_EXPORT jlong
    Java_org_chromium_base_metrics_RecordHistogram_nativeRecordBooleanHistogram(JNIEnv*
    env, jclass jcaller,
    jstring name,
    jlong key,
    jboolean sample) {
  return RecordBooleanHistogram(env, base::android::JavaParamRef<jclass>(env,
      jcaller), base::android::JavaParamRef<jstring>(env, name), key, sample);
}

static jlong RecordEnumeratedHistogram(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& name,
    jlong key,
    jint sample,
    jint boundary);

JNI_GENERATOR_EXPORT jlong
    Java_org_chromium_base_metrics_RecordHistogram_nativeRecordEnumeratedHistogram(JNIEnv*
    env, jclass jcaller,
    jstring name,
    jlong key,
    jint sample,
    jint boundary) {
  return RecordEnumeratedHistogram(env, base::android::JavaParamRef<jclass>(env,
      jcaller), base::android::JavaParamRef<jstring>(env, name), key, sample,
      boundary);
}

static jlong RecordCustomCountHistogram(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& name,
    jlong key,
    jint sample,
    jint min,
    jint max,
    jint numBuckets);

JNI_GENERATOR_EXPORT jlong
    Java_org_chromium_base_metrics_RecordHistogram_nativeRecordCustomCountHistogram(JNIEnv*
    env, jclass jcaller,
    jstring name,
    jlong key,
    jint sample,
    jint min,
    jint max,
    jint numBuckets) {
  return RecordCustomCountHistogram(env,
      base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, name), key, sample, min, max,
      numBuckets);
}

static jlong RecordLinearCountHistogram(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& name,
    jlong key,
    jint sample,
    jint min,
    jint max,
    jint numBuckets);

JNI_GENERATOR_EXPORT jlong
    Java_org_chromium_base_metrics_RecordHistogram_nativeRecordLinearCountHistogram(JNIEnv*
    env, jclass jcaller,
    jstring name,
    jlong key,
    jint sample,
    jint min,
    jint max,
    jint numBuckets) {
  return RecordLinearCountHistogram(env,
      base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, name), key, sample, min, max,
      numBuckets);
}

static jlong RecordSparseHistogram(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& name,
    jlong key,
    jint sample);

JNI_GENERATOR_EXPORT jlong
    Java_org_chromium_base_metrics_RecordHistogram_nativeRecordSparseHistogram(JNIEnv*
    env, jclass jcaller,
    jstring name,
    jlong key,
    jint sample) {
  return RecordSparseHistogram(env, base::android::JavaParamRef<jclass>(env,
      jcaller), base::android::JavaParamRef<jstring>(env, name), key, sample);
}

static jint GetHistogramValueCountForTesting(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& name,
    jint sample);

JNI_GENERATOR_EXPORT jint
    Java_org_chromium_base_metrics_RecordHistogram_nativeGetHistogramValueCountForTesting(JNIEnv*
    env, jclass jcaller,
    jstring name,
    jint sample) {
  return GetHistogramValueCountForTesting(env,
      base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, name), sample);
}

static jint GetHistogramTotalCountForTesting(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& name);

JNI_GENERATOR_EXPORT jint
    Java_org_chromium_base_metrics_RecordHistogram_nativeGetHistogramTotalCountForTesting(JNIEnv*
    env, jclass jcaller,
    jstring name) {
  return GetHistogramTotalCountForTesting(env,
      base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, name));
}

static void Initialize(JNIEnv* env, const base::android::JavaParamRef<jclass>&
    jcaller);

JNI_GENERATOR_EXPORT void
    Java_org_chromium_base_metrics_RecordHistogram_nativeInitialize(JNIEnv* env,
    jclass jcaller) {
  return Initialize(env, base::android::JavaParamRef<jclass>(env, jcaller));
}

}  // namespace android
}  // namespace base

#endif  // org_chromium_base_metrics_RecordHistogram_JNI
