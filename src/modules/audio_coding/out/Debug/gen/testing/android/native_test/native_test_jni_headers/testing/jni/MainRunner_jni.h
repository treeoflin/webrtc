// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/native_test/MainRunner

#ifndef org_chromium_native_test_MainRunner_JNI
#define org_chromium_native_test_MainRunner_JNI

#include <jni.h>

#include "../../../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

// Step 1: forward declarations.
JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_native_1test_MainRunner[];
const char kClassPath_org_chromium_native_1test_MainRunner[] =
    "org/chromium/native_test/MainRunner";

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_chromium_native_1test_MainRunner_clazz = 0;
#ifndef org_chromium_native_1test_MainRunner_clazz_defined
#define org_chromium_native_1test_MainRunner_clazz_defined
inline jclass org_chromium_native_1test_MainRunner_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_native_1test_MainRunner,
      &g_org_chromium_native_1test_MainRunner_clazz);
}
#endif

namespace testing {
namespace android {

// Step 2: method stubs.

static jint RunMain(JNIEnv* env, const base::android::JavaParamRef<jclass>&
    jcaller,
    const base::android::JavaParamRef<jobjectArray>& commandLine);

JNI_GENERATOR_EXPORT jint
    Java_org_chromium_native_1test_MainRunner_nativeRunMain(JNIEnv* env, jclass
    jcaller,
    jobjectArray commandLine) {
  return RunMain(env, base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jobjectArray>(env, commandLine));
}

}  // namespace android
}  // namespace testing

#endif  // org_chromium_native_test_MainRunner_JNI
